// Mocks generated by Mockito 5.4.6 from annotations
// in jem_disco/test/ble_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_reactive_ble/src/discovered_devices_registry.dart'
    as _i2;
import 'package:flutter_reactive_ble/src/reactive_ble.dart' as _i3;
import 'package:jem_disco/data/services/permission_manager/permission_manager_interface.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:reactive_ble_platform_interface/reactive_ble_platform_interface.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDiscoveredDevicesRegistryImpl_0 extends _i1.SmartFake
    implements _i2.DiscoveredDevicesRegistryImpl {
  _FakeDiscoveredDevicesRegistryImpl_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeCharacteristic_1 extends _i1.SmartFake
    implements _i3.Characteristic {
  _FakeCharacteristic_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamSubscription_3<T1> extends _i1.SmartFake
    implements _i4.StreamSubscription<T1> {
  _FakeStreamSubscription_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FlutterReactiveBle].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterReactiveBle extends _i1.Mock
    implements _i3.FlutterReactiveBle {
  @override
  _i2.DiscoveredDevicesRegistryImpl get scanRegistry =>
      (super.noSuchMethod(
            Invocation.getter(#scanRegistry),
            returnValue: _FakeDiscoveredDevicesRegistryImpl_0(
              this,
              Invocation.getter(#scanRegistry),
            ),
            returnValueForMissingStub: _FakeDiscoveredDevicesRegistryImpl_0(
              this,
              Invocation.getter(#scanRegistry),
            ),
          )
          as _i2.DiscoveredDevicesRegistryImpl);

  @override
  _i4.Stream<_i5.BleStatus> get statusStream =>
      (super.noSuchMethod(
            Invocation.getter(#statusStream),
            returnValue: _i4.Stream<_i5.BleStatus>.empty(),
            returnValueForMissingStub: _i4.Stream<_i5.BleStatus>.empty(),
          )
          as _i4.Stream<_i5.BleStatus>);

  @override
  _i5.BleStatus get status =>
      (super.noSuchMethod(
            Invocation.getter(#status),
            returnValue: _i5.BleStatus.unknown,
            returnValueForMissingStub: _i5.BleStatus.unknown,
          )
          as _i5.BleStatus);

  @override
  _i4.Stream<_i5.ConnectionStateUpdate> get connectedDeviceStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectedDeviceStream),
            returnValue: _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
            returnValueForMissingStub:
                _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
          )
          as _i4.Stream<_i5.ConnectionStateUpdate>);

  @override
  _i4.Stream<_i5.CharacteristicValue> get characteristicValueStream =>
      (super.noSuchMethod(
            Invocation.getter(#characteristicValueStream),
            returnValue: _i4.Stream<_i5.CharacteristicValue>.empty(),
            returnValueForMissingStub:
                _i4.Stream<_i5.CharacteristicValue>.empty(),
          )
          as _i4.Stream<_i5.CharacteristicValue>);

  @override
  _i5.LogLevel get logLevel =>
      (super.noSuchMethod(
            Invocation.getter(#logLevel),
            returnValue: _i5.LogLevel.none,
            returnValueForMissingStub: _i5.LogLevel.none,
          )
          as _i5.LogLevel);

  @override
  set logLevel(_i5.LogLevel? logLevel) => super.noSuchMethod(
    Invocation.setter(#logLevel, logLevel),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deinitialize() =>
      (super.noSuchMethod(
            Invocation.method(#deinitialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<int>> readCharacteristic(
    _i5.QualifiedCharacteristic? characteristic,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#readCharacteristic, [characteristic]),
            returnValue: _i4.Future<List<int>>.value(<int>[]),
            returnValueForMissingStub: _i4.Future<List<int>>.value(<int>[]),
          )
          as _i4.Future<List<int>>);

  @override
  _i4.Future<void> writeCharacteristicWithResponse(
    _i5.QualifiedCharacteristic? characteristic, {
    required List<int>? value,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeCharacteristicWithResponse,
              [characteristic],
              {#value: value},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> writeCharacteristicWithoutResponse(
    _i5.QualifiedCharacteristic? characteristic, {
    required List<int>? value,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeCharacteristicWithoutResponse,
              [characteristic],
              {#value: value},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> requestMtu({required String? deviceId, required int? mtu}) =>
      (super.noSuchMethod(
            Invocation.method(#requestMtu, [], {
              #deviceId: deviceId,
              #mtu: mtu,
            }),
            returnValue: _i4.Future<int>.value(0),
            returnValueForMissingStub: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<void> requestConnectionPriority({
    required String? deviceId,
    required _i5.ConnectionPriority? priority,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#requestConnectionPriority, [], {
              #deviceId: deviceId,
              #priority: priority,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<_i5.DiscoveredDevice> scanForDevices({
    required List<_i5.Uuid>? withServices,
    _i5.ScanMode? scanMode = _i5.ScanMode.balanced,
    bool? requireLocationServicesEnabled = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#scanForDevices, [], {
              #withServices: withServices,
              #scanMode: scanMode,
              #requireLocationServicesEnabled: requireLocationServicesEnabled,
            }),
            returnValue: _i4.Stream<_i5.DiscoveredDevice>.empty(),
            returnValueForMissingStub: _i4.Stream<_i5.DiscoveredDevice>.empty(),
          )
          as _i4.Stream<_i5.DiscoveredDevice>);

  @override
  _i4.Stream<_i5.ConnectionStateUpdate> connectToDevice({
    required String? id,
    Map<_i5.Uuid, List<_i5.Uuid>>? servicesWithCharacteristicsToDiscover,
    Duration? connectionTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#connectToDevice, [], {
              #id: id,
              #servicesWithCharacteristicsToDiscover:
                  servicesWithCharacteristicsToDiscover,
              #connectionTimeout: connectionTimeout,
            }),
            returnValue: _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
            returnValueForMissingStub:
                _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
          )
          as _i4.Stream<_i5.ConnectionStateUpdate>);

  @override
  _i4.Stream<_i5.ConnectionStateUpdate> connectToAdvertisingDevice({
    required String? id,
    required List<_i5.Uuid>? withServices,
    required Duration? prescanDuration,
    Map<_i5.Uuid, List<_i5.Uuid>>? servicesWithCharacteristicsToDiscover,
    Duration? connectionTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#connectToAdvertisingDevice, [], {
              #id: id,
              #withServices: withServices,
              #prescanDuration: prescanDuration,
              #servicesWithCharacteristicsToDiscover:
                  servicesWithCharacteristicsToDiscover,
              #connectionTimeout: connectionTimeout,
            }),
            returnValue: _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
            returnValueForMissingStub:
                _i4.Stream<_i5.ConnectionStateUpdate>.empty(),
          )
          as _i4.Stream<_i5.ConnectionStateUpdate>);

  @override
  _i4.Future<List<_i5.DiscoveredService>> discoverServices(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#discoverServices, [deviceId]),
            returnValue: _i4.Future<List<_i5.DiscoveredService>>.value(
              <_i5.DiscoveredService>[],
            ),
            returnValueForMissingStub:
                _i4.Future<List<_i5.DiscoveredService>>.value(
                  <_i5.DiscoveredService>[],
                ),
          )
          as _i4.Future<List<_i5.DiscoveredService>>);

  @override
  _i4.Future<void> discoverAllServices(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#discoverAllServices, [deviceId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i3.Service>> getDiscoveredServices(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#getDiscoveredServices, [deviceId]),
            returnValue: _i4.Future<List<_i3.Service>>.value(<_i3.Service>[]),
            returnValueForMissingStub: _i4.Future<List<_i3.Service>>.value(
              <_i3.Service>[],
            ),
          )
          as _i4.Future<List<_i3.Service>>);

  @override
  _i4.Future<void> clearGattCache(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#clearGattCache, [deviceId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> readRssi(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#readRssi, [deviceId]),
            returnValue: _i4.Future<int>.value(0),
            returnValueForMissingStub: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Stream<List<int>> subscribeToCharacteristic(
    _i5.QualifiedCharacteristic? characteristic,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToCharacteristic, [characteristic]),
            returnValue: _i4.Stream<List<int>>.empty(),
            returnValueForMissingStub: _i4.Stream<List<int>>.empty(),
          )
          as _i4.Stream<List<int>>);

  @override
  _i4.Future<Iterable<_i3.Characteristic>> resolve(
    _i5.QualifiedCharacteristic? characteristic,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#resolve, [characteristic]),
            returnValue: _i4.Future<Iterable<_i3.Characteristic>>.value(
              <_i3.Characteristic>[],
            ),
            returnValueForMissingStub:
                _i4.Future<Iterable<_i3.Characteristic>>.value(
                  <_i3.Characteristic>[],
                ),
          )
          as _i4.Future<Iterable<_i3.Characteristic>>);

  @override
  _i4.Future<_i3.Characteristic> resolveSingle(
    _i5.QualifiedCharacteristic? characteristic,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#resolveSingle, [characteristic]),
            returnValue: _i4.Future<_i3.Characteristic>.value(
              _FakeCharacteristic_1(
                this,
                Invocation.method(#resolveSingle, [characteristic]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i3.Characteristic>.value(
              _FakeCharacteristic_1(
                this,
                Invocation.method(#resolveSingle, [characteristic]),
              ),
            ),
          )
          as _i4.Future<_i3.Characteristic>);
}

/// A class which mocks [Stream].
///
/// See the documentation for Mockito's code generation for more information.
class MockStream<T> extends _i1.Mock implements _i4.Stream<T> {
  @override
  bool get isBroadcast =>
      (super.noSuchMethod(
            Invocation.getter(#isBroadcast),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<int> get length =>
      (super.noSuchMethod(
            Invocation.getter(#length),
            returnValue: _i4.Future<int>.value(0),
            returnValueForMissingStub: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<bool> get isEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isEmpty),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<T> get first =>
      (super.noSuchMethod(
            Invocation.getter(#first),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(this, Invocation.getter(#first)),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.getter(#first)),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(this, Invocation.getter(#first)),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.getter(#first)),
          )
          as _i4.Future<T>);

  @override
  _i4.Future<T> get last =>
      (super.noSuchMethod(
            Invocation.getter(#last),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(this, Invocation.getter(#last)),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.getter(#last)),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(this, Invocation.getter(#last)),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.getter(#last)),
          )
          as _i4.Future<T>);

  @override
  _i4.Future<T> get single =>
      (super.noSuchMethod(
            Invocation.getter(#single),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(this, Invocation.getter(#single)),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.getter(#single)),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(this, Invocation.getter(#single)),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.getter(#single)),
          )
          as _i4.Future<T>);

  @override
  _i4.Stream<T> asBroadcastStream({
    void Function(_i4.StreamSubscription<T>)? onListen,
    void Function(_i4.StreamSubscription<T>)? onCancel,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#asBroadcastStream, [], {
              #onListen: onListen,
              #onCancel: onCancel,
            }),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.StreamSubscription<T> listen(
    void Function(T)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listen,
              [onData],
              {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError,
              },
            ),
            returnValue: _FakeStreamSubscription_3<T>(
              this,
              Invocation.method(
                #listen,
                [onData],
                {
                  #onError: onError,
                  #onDone: onDone,
                  #cancelOnError: cancelOnError,
                },
              ),
            ),
            returnValueForMissingStub: _FakeStreamSubscription_3<T>(
              this,
              Invocation.method(
                #listen,
                [onData],
                {
                  #onError: onError,
                  #onDone: onDone,
                  #cancelOnError: cancelOnError,
                },
              ),
            ),
          )
          as _i4.StreamSubscription<T>);

  @override
  _i4.Stream<T> where(bool Function(T)? test) =>
      (super.noSuchMethod(
            Invocation.method(#where, [test]),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.Stream<S> map<S>(S Function(T)? convert) =>
      (super.noSuchMethod(
            Invocation.method(#map, [convert]),
            returnValue: _i4.Stream<S>.empty(),
            returnValueForMissingStub: _i4.Stream<S>.empty(),
          )
          as _i4.Stream<S>);

  @override
  _i4.Stream<E> asyncMap<E>(_i4.FutureOr<E> Function(T)? convert) =>
      (super.noSuchMethod(
            Invocation.method(#asyncMap, [convert]),
            returnValue: _i4.Stream<E>.empty(),
            returnValueForMissingStub: _i4.Stream<E>.empty(),
          )
          as _i4.Stream<E>);

  @override
  _i4.Stream<E> asyncExpand<E>(_i4.Stream<E>? Function(T)? convert) =>
      (super.noSuchMethod(
            Invocation.method(#asyncExpand, [convert]),
            returnValue: _i4.Stream<E>.empty(),
            returnValueForMissingStub: _i4.Stream<E>.empty(),
          )
          as _i4.Stream<E>);

  @override
  _i4.Stream<T> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#handleError, [onError], {#test: test}),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.Stream<S> expand<S>(Iterable<S> Function(T)? convert) =>
      (super.noSuchMethod(
            Invocation.method(#expand, [convert]),
            returnValue: _i4.Stream<S>.empty(),
            returnValueForMissingStub: _i4.Stream<S>.empty(),
          )
          as _i4.Stream<S>);

  @override
  _i4.Future<dynamic> pipe(_i4.StreamConsumer<T>? streamConsumer) =>
      (super.noSuchMethod(
            Invocation.method(#pipe, [streamConsumer]),
            returnValue: _i4.Future<dynamic>.value(),
            returnValueForMissingStub: _i4.Future<dynamic>.value(),
          )
          as _i4.Future<dynamic>);

  @override
  _i4.Stream<S> transform<S>(_i4.StreamTransformer<T, S>? streamTransformer) =>
      (super.noSuchMethod(
            Invocation.method(#transform, [streamTransformer]),
            returnValue: _i4.Stream<S>.empty(),
            returnValueForMissingStub: _i4.Stream<S>.empty(),
          )
          as _i4.Stream<S>);

  @override
  _i4.Future<T> reduce(T Function(T, T)? combine) =>
      (super.noSuchMethod(
            Invocation.method(#reduce, [combine]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#reduce, [combine]),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.method(#reduce, [combine])),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#reduce, [combine]),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.method(#reduce, [combine])),
          )
          as _i4.Future<T>);

  @override
  _i4.Future<S> fold<S>(S? initialValue, S Function(S, T)? combine) =>
      (super.noSuchMethod(
            Invocation.method(#fold, [initialValue, combine]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<S>(
                    this,
                    Invocation.method(#fold, [initialValue, combine]),
                  ),
                  (S v) => _i4.Future<S>.value(v),
                ) ??
                _FakeFuture_2<S>(
                  this,
                  Invocation.method(#fold, [initialValue, combine]),
                ),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<S>(
                    this,
                    Invocation.method(#fold, [initialValue, combine]),
                  ),
                  (S v) => _i4.Future<S>.value(v),
                ) ??
                _FakeFuture_2<S>(
                  this,
                  Invocation.method(#fold, [initialValue, combine]),
                ),
          )
          as _i4.Future<S>);

  @override
  _i4.Future<String> join([String? separator = '']) =>
      (super.noSuchMethod(
            Invocation.method(#join, [separator]),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#join, [separator]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#join, [separator]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [needle]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> forEach(void Function(T)? action) =>
      (super.noSuchMethod(
            Invocation.method(#forEach, [action]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> every(bool Function(T)? test) =>
      (super.noSuchMethod(
            Invocation.method(#every, [test]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> any(bool Function(T)? test) =>
      (super.noSuchMethod(
            Invocation.method(#any, [test]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Stream<R> cast<R>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: _i4.Stream<R>.empty(),
            returnValueForMissingStub: _i4.Stream<R>.empty(),
          )
          as _i4.Stream<R>);

  @override
  _i4.Future<List<T>> toList() =>
      (super.noSuchMethod(
            Invocation.method(#toList, []),
            returnValue: _i4.Future<List<T>>.value(<T>[]),
            returnValueForMissingStub: _i4.Future<List<T>>.value(<T>[]),
          )
          as _i4.Future<List<T>>);

  @override
  _i4.Future<Set<T>> toSet() =>
      (super.noSuchMethod(
            Invocation.method(#toSet, []),
            returnValue: _i4.Future<Set<T>>.value(<T>{}),
            returnValueForMissingStub: _i4.Future<Set<T>>.value(<T>{}),
          )
          as _i4.Future<Set<T>>);

  @override
  _i4.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(
            Invocation.method(#drain, [futureValue]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<E>(
                    this,
                    Invocation.method(#drain, [futureValue]),
                  ),
                  (E v) => _i4.Future<E>.value(v),
                ) ??
                _FakeFuture_2<E>(
                  this,
                  Invocation.method(#drain, [futureValue]),
                ),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<E>(
                    this,
                    Invocation.method(#drain, [futureValue]),
                  ),
                  (E v) => _i4.Future<E>.value(v),
                ) ??
                _FakeFuture_2<E>(
                  this,
                  Invocation.method(#drain, [futureValue]),
                ),
          )
          as _i4.Future<E>);

  @override
  _i4.Stream<T> take(int? count) =>
      (super.noSuchMethod(
            Invocation.method(#take, [count]),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.Stream<T> takeWhile(bool Function(T)? test) =>
      (super.noSuchMethod(
            Invocation.method(#takeWhile, [test]),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.Stream<T> skip(int? count) =>
      (super.noSuchMethod(
            Invocation.method(#skip, [count]),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.Stream<T> skipWhile(bool Function(T)? test) =>
      (super.noSuchMethod(
            Invocation.method(#skipWhile, [test]),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.Stream<T> distinct([bool Function(T, T)? equals]) =>
      (super.noSuchMethod(
            Invocation.method(#distinct, [equals]),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);

  @override
  _i4.Future<T> firstWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
            Invocation.method(#firstWhere, [test], {#orElse: orElse}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#firstWhere, [test], {#orElse: orElse}),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#firstWhere, [test], {#orElse: orElse}),
                ),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#firstWhere, [test], {#orElse: orElse}),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#firstWhere, [test], {#orElse: orElse}),
                ),
          )
          as _i4.Future<T>);

  @override
  _i4.Future<T> lastWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
            Invocation.method(#lastWhere, [test], {#orElse: orElse}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#lastWhere, [test], {#orElse: orElse}),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#lastWhere, [test], {#orElse: orElse}),
                ),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#lastWhere, [test], {#orElse: orElse}),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#lastWhere, [test], {#orElse: orElse}),
                ),
          )
          as _i4.Future<T>);

  @override
  _i4.Future<T> singleWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
            Invocation.method(#singleWhere, [test], {#orElse: orElse}),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#singleWhere, [test], {#orElse: orElse}),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#singleWhere, [test], {#orElse: orElse}),
                ),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#singleWhere, [test], {#orElse: orElse}),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#singleWhere, [test], {#orElse: orElse}),
                ),
          )
          as _i4.Future<T>);

  @override
  _i4.Future<T> elementAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#elementAt, [index]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#elementAt, [index]),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.method(#elementAt, [index])),
            returnValueForMissingStub:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#elementAt, [index]),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(this, Invocation.method(#elementAt, [index])),
          )
          as _i4.Future<T>);

  @override
  _i4.Stream<T> timeout(
    Duration? timeLimit, {
    void Function(_i4.EventSink<T>)? onTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue: _i4.Stream<T>.empty(),
            returnValueForMissingStub: _i4.Stream<T>.empty(),
          )
          as _i4.Stream<T>);
}

/// A class which mocks [PermissionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionManager extends _i1.Mock implements _i7.PermissionManager {
  @override
  _i4.Future<void> requestBluetoothPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#requestBluetoothPermissions, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
